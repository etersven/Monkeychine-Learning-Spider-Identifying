# -*- coding: utf-8 -*-
"""Train and Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AEygvQnATuJI6ZeSmJjoIedZNNsrvYuT

Train and Test
"""

#install fastai2
!pip install -Uqq fastbook wandb
import fastbook

#imports 
from fastbook import *
from fastai.vision.widgets import *
from fastai.callback.wandb import WandbCallback
from fastai.callback.tracker import SaveModelCallback

import numpy as np
import pandas as pd
from tqdm.auto import tqdm
from plotnine import *
import shutil
import wandb

import warnings
warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount("/content/drive/")

from fastbook import *

get_image_files("/content/drive/MyDrive/Colab Notebooks/images")

dblock = DataBlock(
    blocks=(ImageBlock, CategoryBlock), #x - image; y - single class
    get_items=get_image_files, #get image
    splitter=GrandparentSplitter(), #use parent folder as train-valid split
    get_y=parent_label, #use parent folder as label
    #two choices for resizing and rationale
    #squishing to prevent cropping places without chips/raisins
    item_tfms=Resize(512, method=ResizeMethod.Squish), 
    # #cropping to preserve image quality; tried and doesn't work - peaked at 0.85 val acc
    # item_tfms=RandomResizedCrop(512),
    batch_tfms=aug_transforms(size=512, flip_vert=True), #standard fastai augmentation at size 512
    )
dls = dblock.dataloaders('/content/drive/MyDrive/Colab Notebooks/images', bs=64) #batch size = 64

dls.vocab

dls.train.show_batch(max_n=9, nrows=3)

dls.train.show_batch(max_n=4, nrows=1, unique= True)

"""Train"""

learn = cnn_learner(dls, resnet34, metrics=[error_rate, accuracy])

learn.lr_find()

learn.fine_tune(epochs=10, freeze_epochs=1, base_lr=0.0010000000474974513)

learn.recorder.plot_loss()

learn.recorder.plot_sched()

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix(figsize = (12,12) ,dpi = 60)

interp.plot_top_losses(9, nrows=3,figsize = (25,25))

interp.print_classification_report()

learn.show_results()

learn.export("AiMangMum(NoHumanErrorFinal)")